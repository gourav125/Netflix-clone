{"version":3,"sources":["axios.js","Row.js","Requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","Requests","fetchtrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchHorrorMovies","fetchComedyMovies","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleshow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3df4fd39.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import axios from './axios';\r\nimport React,  {useState, useEffect} from 'react';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_Url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow}) {\r\n    const [movies, setMovies] = useState([]); \r\n\r\n    const [trailerUrl, setTrailerUrl] = useState()\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results)\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n    \r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };    \r\n\r\n      const handleClick = (movie) =>{\r\n          if (trailerUrl) {\r\n              setTrailerUrl(\"\");\r\n          }else {\r\n              movieTrailer(movie?.name || \"\")\r\n              .then((url) => {\r\n                  const urlParams = new URLSearchParams(new URL(url).search);\r\n                  setTrailerUrl(urlParams.get(\"v\"));\r\n              })\r\n              .catch((error) => console.log(error));\r\n          }\r\n      }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie =>(\r\n                    <img\r\n                    key={movie.id}\r\n                    onClick={() => handleClick(movie)}\r\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                    src={`${base_Url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY =\"65e45c80159c1ad31a3c3bd03e8a8fdf\";\r\n\r\nconst Requests = {\r\n    fetchtrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/tv/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`\r\n}\r\n\r\nexport default Requests;","import axios from './axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Requests from './Requests';\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(Requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[Math.floor(Math.random() * request.data.results.length-1)]\r\n            );\r\n                return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n    \r\n        console.log(movie); \r\n\r\n        function truncate(str, n){\r\n            return str?.length > n ? str.substr(0,n-1)+\"...\": str;\r\n        }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n           backgroundSize:\"cover\",\r\n           backgroundImage: `url(\r\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n           )`,\r\n            backgroundPosition: \"center center\",\r\n        }} \r\n        >       \r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">PLAY</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">{truncate(movie?.overview,150)}</h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"/>\r\n        </header>        \r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React,  { useState, useEffect } from 'react'\r\nimport './Nav.css';\r\n\r\n\r\nfunction Nav() {\r\n    const [show,handleshow]= useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100) {\r\n                handleshow(true);\r\n            } else handleshow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\" }`}>\r\n            <img className=\"nav__logo\"\r\n            src=\"https://image.tmdb.org/t/p/original/wwemzKWzjKYJFfCeiB57q3r4Bcm.svg\" alt=\"netflix logo\"\r\n            />\r\n\r\n             <img className=\"nav__avatar\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"avatar logo\"\r\n            />\r\n                       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport Requests from './Requests';\nimport Banner from './Banner'\nimport Nav from './Nav'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row title=\"Netflix Originals\" fetchUrl ={Requests.fetchNetflixOriginals} isLargeRow/>\n      <Row title=\"Trending Now\" fetchUrl = {Requests.fetchtrending} />\n      <Row title=\"Top Rated\" fetchUrl = {Requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl = {Requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl = {Requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl = {Requests.fetchHorrorMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}